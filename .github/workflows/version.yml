name: Generate Release Version

on:
  workflow_call:
    outputs:
      version:
        description: "Automatic Version Number"
        value: ${{ jobs.versioner.outputs.version }}
    inputs:
      major:
        type: string
        description: "Major version"
        required: true
      minor:
        type: string
        description: "Minor version"
        required: true
      patch:
        type: string
        description: "Patch version"
        required: true
      tag_prefix:
        type: string
        description: "Value Tag to put at front of version"
        required: false
        default: "v"

jobs:
  versioner:
    runs-on: windows-latest
    name: Generate Version
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Auto Version
        id: version
        shell: pwsh
        run: |
          $InputMajor=${{ inputs.major }}
          $InputMinor=${{ inputs.minor }}
          $InputPatch=${{ inputs.patch }}
          $cleanedTags = git tag -l ${{ inputs.tag_prefix }}* | ForEach {$_.replace('${{ inputs.tag_prefix }}','')}
          $Tags = ($cleanedTags | Sort {[version]$_})
          switch ($tags.count) {
            { $_ -gt 1 } {$tag = $tags[$tags.count-1]}
            { $_ -eq 1 } {$tag = $tags}
            default {
              [version]$tag="$($InputMajor).$($InputMinor).$($InputPatch).0"
              Write-Warning "Tag not found... using $($tag.ToString())..."
              $resetCounter=$true
            }
          }

          $version = [version]"$tag"
          If($InputMajor -gt $version.Major)
          {
            [string]$newVersion = "$InputMajor."
            $resetCounter = $true
          }
          else {
            [string]$newVersion = "$($version.Major)."
          }

          If($InputMinor -gt $version.Minor)
          {
            [string]$newVersion = $newVersion+"$InputMinor."
            $resetCounter = $true
          }
          Else{
            [string]$newVersion = $newVersion+"$($version.Minor)."
          }

          If($InputPatch -gt $version.Build)
          {
            [string]$newVersion = $newVersion+"$InputPatch."
            $resetCounter = $true
          }
          else{
            [string]$newVersion = $newVersion+"$($version.Build)."
          }

          If(-not $resetCounter)
          {
            [string]$newVersion = $newVersion+"$($version.Revision + 1)"
          }
          else {
            [string]$newVersion = $newVersion+"0"
          }
          
          echo "version='$newVersion'" >> $env:GITHUB_OUTPUT